version: '3.8'

services:
  test_web_app:
    container_name: test_web_app
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
#    environment:
#      - POSTGRES_HOST=test_postgres_db
#      - POSTGRES_DB=${TEST_DB_NAME}
#      - POSTGRES_PORT=${TEST_DB_PORT}
#      - POSTGRES_USER=${TEST_DB_USER}
#      - POSTGRES_PASS=${TEST_DB_PASS}
    command: "pytest -vv"
    networks:
      - app_test_network
    depends_on:
      test_postgres_db:
        condition: service_healthy
      test_redis_db:
        condition: service_healthy

  test_postgres_db:
    container_name: test_postgres_db
    image: postgres:15.1-alpine
    volumes:
      - /var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}

    expose:
      - 5432
    networks:
      - app_test_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 10s
      retries: 100
    restart: always

  test_redis_db:
    container_name: test_redis_db
    image: redis:latest
    expose:
      - 6379
    ports:
      - "6379:6379"
    networks:
      - app_test_network
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  app_test_network:
    name: app_test_network
